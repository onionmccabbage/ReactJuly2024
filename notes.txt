React
=====
July 22, 23, 25, 26

Toby Dussek

9:30  start
11:00 coffee
12:30 lunch
3:00  tea
4:30  end

> introductions and setup
> manage recordings
> the repo https://github.com/onionmccabbage/ReactJuly2024
> code-along and then lab exercises
- all questions, comments, observations, interjections etc. welcome at any time

- the DOM and how React decides what to render
- React dev tools
- no longer use class components - instead use pure functional components

q - how can we do like onBlur  and maintain mutated text input...




> scaffolding a vite project with React and Typescript
> the vite cli
- understanding state: the useState hook (all hooks MUST go at the top of the code)
- lifting state up
- immutable props and state: a single-source of truth
- passing props
- receiving props into components: 
    const MyComponent(props)=>{}
    const MyComponent({propA, propB})=>{}
- only ever use state to change stateful values: never mutate them directly
- passing components as props (rendering children)
- useContext hook
- hooks and component lifecycle

- Architecture
- separating components into logical structures
- re-useable components and code: export and exportDefault
- ways to import (also configurations needed)
- ways to architect a project
- where to put static assets
- package.json: adding libraries and configuring behaviour
- other related config files: tsconfig etc.
- what a production build looks like

- writing custom hooks

- jsx: always use Capitals for non-standard elements
- <> and <Fragment>
- injecting content, props, event-handlers, expressions with {}
- injecting object literals with {{}}
- event-handlers: onClick={handler} and onClick={()=>handler} // careful...
- conditional rendering
- iterative rendering and keys
- <scrict> mode: so good they rendered it twice

- <form> and <Form> (also neither)
- browser-driven validation
- form action
- form fields: controlled and uncontrolled
- binding form field events
- client-side data: map and filter

- JavaScript
- events, event.target, preventDefault and stopPropagation
- modern ES6+ features

- Debugging: interpreting error messages, using console.log and using <pre>JSON</pre>
- using React Devtools

- Typescript
- language engine and data-type checking
- development-time only
- any-type and optional members
- types, combinations, interface, enum
- post-colon typing n:type
- typing objects {k:v}:{k:type}
- generics
- the Typescript playground and tsconfig
- difficult-to-solve typescript problems

- asynchronous code: loading data with fetch
- impure functional components: useEffect hook
- events, promises
- observables

- CSS still cascades from <App/>
- Custom style components
- cannot use css 'class' in jsx, so use 'className'

- dev and prod build automation

- JSON: direct import for local config

- ssr, eager-loading and lazy loading

- routing with react-router
- root router
- <a>,  <Link> and <outlet>
- SPA and multi-page apps
- passing route parameters
- catch-all and 404 handlers